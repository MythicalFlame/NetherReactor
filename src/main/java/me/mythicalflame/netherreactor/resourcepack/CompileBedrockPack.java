package me.mythicalflame.netherreactor.resourcepack;

import me.mythicalflame.netherreactor.NetherReactorModLoader;
import me.mythicalflame.netherreactor.content.Mod;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

//TODO: ADD UUID
public final class CompileBedrockPack
{
    private static final NetherReactorModLoader plugin = JavaPlugin.getPlugin(NetherReactorModLoader.class);
    public static boolean compile()
    {
        if (createManifest())
        {
            plugin.getLogger().info("[Bedrock] Successfully created manifest.json");
        }
        else
        {
            return false;
        }

        if (createItemTextureJSON())
        {
            plugin.getLogger().info("[Bedrock] Successfully created textures/item_texture.json");
        }
        else
        {
            return false;
        }

        //TODO
        if (createItemTextureAssets())
        {
            plugin.getLogger().info("[Bedrock] Successfully added item textures to textures/items");
        }
        else
        {
            return false;
        }

        return true;
    }

    private static boolean createManifest()
    {
        File manifestFile = new File(plugin.getDataFolder(), "generated/bedrock_pack/manifest.json");
        try
        {
            manifestFile.createNewFile();
        }
        catch (Exception e)
        {
            plugin.getLogger().severe("[Bedrock] An error occurred while trying to create manifest.json:");
            e.printStackTrace();
            return false;
        }

        List<String> fileContent = new ArrayList<>(List.of("{\n\t\"format_version\": 2,\n\t\"header\": {\n\t\t\"name\": \"NetherReactor Generated Pack\",\n\t\t\"description\": \"Pack generated by NetherReactor Modloader\",\n\t\t\"uuid\": \"ADD_HERE\",\n\t\t\"version\": [0, 8, 0],\n\t\t\"min_engine_version\": [1, 20, 60]\n\t},\n\t\"modules\": [\n\t\t{\n\t\t\t\"type\": \"resources\",\n\t\t\t\"uuid\": \"ADD_HERE\",\n\t\t\t\"version\": [0, 8, 0]\n\t\t}\n\t]\n}"));
        try
        {
            Files.write(manifestFile.toPath(), fileContent, StandardCharsets.UTF_8);
        }
        catch (Exception e)
        {
            plugin.getLogger().severe("[Bedrock] An error occurred while writing to manifest.json:");
            e.printStackTrace();
            return false;
        }

        return true;
    }

    private static boolean createItemTextureJSON()
    {
        File itemTextureFile = new File(plugin.getDataFolder(), "generated/bedrock_pack/textures/item_texture.json");
        try
        {
            itemTextureFile.createNewFile();
        }
        catch (Exception e)
        {
            plugin.getLogger().severe("[Bedrock] An error occurred while trying to create textures/item_texture.json:");
            e.printStackTrace();
            return false;
        }

        List<String> fileContent = new ArrayList<>(List.of("{\n\t\"resource_pack_name\": \"NetherReactor Generated Pack\",\n\t\"texture_name\": \"atlas.items\",\n\t\"texture_data\": {"));
        int modCount = NetherReactorModLoader.getRegisteredMods().size();
        for (int i = 0; i < modCount; ++i)
        {
            Mod mod = NetherReactorModLoader.getRegisteredMods().get(i);
            int itemCount = mod.getRegisteredItems().size();
            for (int j = 0; j < itemCount; ++j)
            {
                String ID = mod.getRegisteredItems().get(j).getID();
                fileContent.add("\t\t\"" + ID + "\": {\n\t\t\t\"textures\": [\n\t\t\t\t\"textures/items/" + ID + "\"\n\t\t\t]\n\t\t}" + ((i == modCount - 1 && j == itemCount - 1) ? "" : ","));
            }
        }
        fileContent.add("\t}\n}");
        try
        {
            Files.write(itemTextureFile.toPath(), fileContent, StandardCharsets.UTF_8);
        }
        catch (Exception e)
        {
            plugin.getLogger().severe("[Bedrock] An error occurred while writing to textures/item_texture.json:");
            e.printStackTrace();
            return false;
        }

        return true;
    }

    private static boolean createItemTextureAssets()
    {
        //TODO
        return true;
    }
}
